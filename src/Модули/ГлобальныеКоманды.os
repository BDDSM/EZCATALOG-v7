Функция ПреобразоватьXML(Знач Значение) Экспорт

 Если ТипЗнч(Значение)=Тип("Строка") Тогда
 	Значение=СокрЛП(СтрЗаменить(Значение,"&"," "));
    Значение=СтрЗаменить(Значение,"<","");
    Значение=СтрЗаменить(Значение,">","");
    Значение=СтрЗаменить(Значение,"""","''");
 КонецЕсли;
  
 Возврат Значение;
 
КонецФункции

Функция ПолучитьСтруктуруПутейПодключения() Экспорт 
	
	НоваяСтруктура = Новый Структура;
	
	//{[*](фрагмент ИЗМЕНЕН), Волокитин Александр Сергеевич 06.02.2020 11:21:41
	// временно поменял диск H на e
	
	НоваяСтруктура.Вставить("ФайлБазыЕордер", 		  	"H:\ezcatalog\data.fdb");
	НоваяСтруктура.Вставить("КаталогПрограммы", 		"H:\ezcatalog\");
	НоваяСтруктура.Вставить("ФайлFBClient", 		  	"C:\Program Files (x86)\Firebird\Firebird_2_5\bin\fbclient.dll");
	НоваяСтруктура.Вставить("ПапкаСОписанием", 			"H:\ezcatalog\ProdDescr\");
	НоваяСтруктура.Вставить("ПапкаСФото", 				"H:\ezcatalog\ProdImg\");
	
	Возврат НоваяСтруктура;
	
КонецФункции

 // <Описание функции>
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция ПолучитьПодключекниеКБазе(СтруктураПодключения) 

	ФайлБазы = Новый Файл(СтруктураПодключения.ФайлБазыЕордер);
	Если НЕ ФайлБазы.Существует() Тогда
		Возврат;
 	КонецЕсли;
	
	Попытка
		eOrderCat = Новый COMОбъект("EZCATALOG.ProductCatalog");
		eOrderCat.LogFileName 				= "C:\Scripts\logEZFull.txt";
		eOrderCat.FolderProductImages 		= СтруктураПодключения.ПапкаСФото;
		eOrderCat.FolderProductDescription  = СтруктураПодключения.ПапкаСОписанием;
	Исключение
		МТИ.илСообщить(ОписаниеОшибки());
		Возврат;
    КонецПопытки;
	
 	Если eOrderCat.Connect(ФайлБазы.ПолноеИмя, СтруктураПодключения.КаталогПрограммы, СтруктураПодключения.ФайлFBClient) = 0 Тогда
		eOrderCat.Disconnect();
		МТИ.илСообщить(ОписаниеОшибки());
        Возврат;
	КонецЕсли;

КонецФункции

 // <Описание функции>
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция ОчиститьПериодическиеЗначения()
		// Очищаем периодические данные массово	
		eOrderCat.ModifyProductsFieldWhere("FSTATE",0,"FSTATE<>0"); //очиска остатков
		eOrderCat.ModifyProductsFieldWhere("FPRICE",0,"FPRICE<>0"); //очистка цены		
		eOrderCat.ModifyProductsFieldWhere("FATT_INT_15",0,"FATT_INT_15<>0"); // Очистим Остаток Екатеринбург
		eOrderCat.ModifyProductsFieldWhere("FATT_INT_16",0,"FATT_INT_16<>0"); // Очистим Остаток Челябинск 
 КонецФункции
  
 // <Описание функции>
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция ОтправитьОбновлениеНаFTP()
	
	Попытка
		ИмяФайлаОбновления = "C:\Scripts\lastupdate.eoc";
		Если eOrderCat.SaveUpdateToFile(ИмяФайлаОбновления, "Обновление каталога", "") = 1  Тогда
			eOrderCat.UploadUpdateToFtp(ИмяФайлаОбновления);
		КонецЕсли;	
	Исключение
		ЗаписьЖурналаРегистрации("Загрузка_Заказа_Ошибка", УровеньЖурналаРегистрации.Ошибка,,," Ошибка сохранения " + ОписаниеОшибки());
	КонецПопытки;

КонецФункции



 // <Описание функции>
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция СоздатьОбновитьКарточкуТовара(ЭтоГруппа)
	Если ЭтоГруппа Тогда 

 КонецФункции

 // <Описание функции>
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция СоздатьОбновитьГруппуТоваров()
	ИмяГруппы 			= СокрЛП(ТекНоменклатура.Наименование);
	КодГруппы 			= СокрЛП(ТекНоменклатура.Код);
	КодГруппыРодителя   = СокрЛП(ТекРодитель.Код);
	ИмяГруппыРодителя   = СокрЛП(ТекРодитель.Наименование);
	
	// ИЩЕМ ПО КОДУ
	НовыйНайденный = eOrderCat.FindDirectoryByNumber(КодГруппы); 				
	Если НовыйНайденный = Null Тогда
		// поищем по имени					
		ИДНайденный = eOrderCat.FindDirectory(ИмяГруппы, ИмяГруппыРодителя);
		Если ИДНайденный = 0 Тогда
			ИДГруппы = eOrderCat.AppendDirectory(ИДГруппы, ИмяГруппы);
			
			оНовыйНайденный = eOrderCat.GetDirectoryData(ИДГруппы);
			оНовыйНайденный.Number = КодГруппы;
			оНовыйНайденный.SaveChanges();
			МТИ.илСообщить("не нашли " + ИмяГруппы + "/" + КодГруппы);  
		Иначе 					
			оНовыйНайденный = eOrderCat.GetDirectoryData(ИДНайденный);
			Если оНовыйНайденный.Number <> КодГруппы Тогда
				МТИ.илСообщить("не равные кода " + оНовыйНайденный.Number + "/" + КодГруппы); 
				//оНовыйНайденный.Number = КодГруппы;
				//оНовыйНайденный.SaveChanges();
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		// тут надо проверить и поменять родителя 					
		НайденыйВладелецГруппы = eOrderCat.FindDirectoryByNumber(КодГруппыРодителя);
		Если НЕ НайденыйВладелецГруппы = Null Тогда
			Если НовыйНайденный.ParentID <> НайденыйВладелецГруппы.SysID Тогда 
				НовыйНайденный.ParentID = НайденыйВладелецГруппы.SysID;
				НовыйНайденный.SaveChanges();
			КонецЕсли;
		КонецЕсли;
		
		Если СокрЛП(НовыйНайденный.Name) <> ИмяГруппы Тогда
			НовыйНайденный.Name = ИмяГруппы;
			НовыйНайденный.SaveChanges();
		КонецЕсли;
		
		ИДГруппы = НовыйНайденный.SysID;
		
	КонецЕсли;		
	 
 КонецФункции

 // <Описание функции>
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция СоздатьОбновитьЕлемент()
	КодПродукта = СокрЛП(ВыборкаПоНоменклатуре.Артикул);
	//выгрузить описание  28,03,2016
	Описание = СокрЛП(ВыборкаПоНоменклатуре.Номенклатура.ДополнительноеОписаниеНоменклатуры);
	Описание = ПреобразоватьXML(Описание);
	
	Если ЗначениеЗаполнено(КодПродукта) Тогда			
		
		мНаименование = СокрЛП(ТекНоменклатура.НаименованиеПолное);
		Если мНаименование = "" Тогда
			мНаименование = СокрЛП(ТекНоменклатура.Наименование);
		КонецЕсли;
		
		// + ВАС 05.11.2015 обрежем до 120
		мНаименование = Лев(мНаименование, 120);
		мНаименование = ПреобразоватьXML(мНаименование);
		
		Цена = Ценообразование.ОкруглитьЦену(ВыборкаПоНоменклатуре.Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
							
		//КоличествоВУпак = ВыборкаПоНоменклатуре.КоличествоВУпаковке;
							
		ИДТовара = eOrderCat.FindProduct(0, КодПродукта);
		
		//НовыйНайденный = eOrderCat.FindDirectoryByNumber();			
		//Если НовыйНайденный = Null Тогда
		//	ИДГруппы =
		// КонецЕсли;				
		//Попытка
		Если ИДГруппы = Неопределено Тогда
			ИДГруппы = 0;
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(ИДТовара) Тогда
			// Переписываем всегда
			ProductData = eOrderCat.FindProductByID(ИДТовара);
			
			ProductData.SetAttrValue("FIDDIRECTORIES", ИДГруппы); // предыдущий родитель!	
			ProductData.SetAttrValue("FNAME",          мНаименование);
			
			// это остаток 
			
			ProductData.SetAttrValue("FATT_INT_15",	ВыборкаПоНоменклатуре.ОстатокЕкат); 
			 ProductData.SetAttrValue("FATT_INT_16",	ВыборкаПоНоменклатуре.ОстатокЧелябинск);
			ОстатокИтого = ВыборкаПоНоменклатуре.ОстатокЕкат + ВыборкаПоНоменклатуре.ОстатокЧелябинск;
			ProductData.SetAttrValue("FSTATE",	       ОстатокИтого);
			
			ProductData.SetAttrValue("FPRICE",	       Цена);
			
		Иначе // добавляем новый товар
			ОстатокИтого = ВыборкаПоНоменклатуре.ОстатокЕкат + ВыборкаПоНоменклатуре.ОстатокЧелябинск;
			ИДТовара = eOrderCat.AppendProduct(ИДГруппы, КодПродукта, мНаименование, Цена, ОстатокИтого);
			
			ProductData = eOrderCat.FindProductByID(ИДТовара);
			ProductData.SetAttrValue("FNEW", 1);
		КонецЕсли;
		
		ProductData.SetAttrValue("FATT_STR_8",  СокрЛП(ВыборкаПоНоменклатуре.ЕИ));
		ProductData.SetAttrValue("FATT_INT_9",  ВыборкаПоНоменклатуре.КоличествоВУпаковке);
		ProductData.SetAttrValue("FATT_STR_12", СокрЛП(ВыборкаПоНоменклатуре.Производитель));
		ProductData.SetAttrValue("FATT_STR_10", СокрЛП(ВыборкаПоНоменклатуре.АртикулПроизводителя));
		ProductData.SetAttrValue("FATT_STR_11", СокрЛП(ВыборкаПоНоменклатуре.НомерПоКаталогу));
		
		//{[+](фрагмент ДОБАВЛЕН), Волокитин Александр Сергеевич 02.03.2020 13:31:59					
		мДубликат = Лев(СокрЛП(ВыборкаПоНоменклатуре.Дубликат), 25);  // больше чем 25 символов не будет
		ПоследнийРазделитель = СтрНайти(мДубликат,";", НаправлениеПоиска.СКонца);
		Если ПоследнийРазделитель > 0 Тогда
			мДубликат = Лев(мДубликат,  ПоследнийРазделитель - 1);
		КонецЕсли;
		ProductData.SetAttrValue("FATT_STR_14", СокрЛП(мДубликат)); // дубликат
		
		//{[+](фрагмент ДОБАВЛЕН), Волокитин Александр Сергеевич 02.03.2020 13:31:59
		// Тип данных Int.
		Если ВыборкаПоНоменклатуре.ДатаСоздания >= ДатНачалаДня Тогда
			чНоваяПозиция = 1;
		Иначе
			чНоваяПозиция = 0;
		КонецЕсли;
		ProductData.SetAttrValue("FNEW", чНоваяПозиция);  // признак новинки
		
		
		ProductData.SaveChanges();
		Если Описание <> "" Тогда  //выгрузить описание  28,03,2016
			eOrderCat.ModifyProductDescription(ИДТовара, Описание);
		КонецЕсли;
		
		//если ИД товара в 1С нет или не совпадает пропишем новый в номенклатуру
		ИдДляЗаписи = СтрЗаменить(СокрЛП(Строка(ИДТовара))," ","");
		
		Если СокрЛП(ТекНоменклатура.КодЭЗ) <> ИдДляЗаписи Тогда
			ТекНомОБъект = ТекНоменклатура.ПолучитьОбъект();
			ТекНомОБъект.КодЭЗ = ИдДляЗаписи;
			Попытка
				ТекНомОБъект.Записать();
			Исключение
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;

 КонецФункции